//Charlie Barry
//#include <iostream>
#include <ncurses.h>
#include <locale>
#include "libsqlite.hpp"

using namespace std;

const int width = 105;
const int height = 36;


const int tileno = 9;

struct tile {
  string character;
  int colour;
} ;

struct tile tiles[tileno];

void uploadMap(int map[35][105]){
  sqlite::sqlite db( "../Game/gamedb.db" ); // open database
  for(int x = 1; x < 106; ++x){
    for(int y = 1; y < 35; ++y){
      auto cur = db.get_statement(); // create query
      cur->set_sql( "INSERT INTO map(dungeonID, x, y, tileID) VALUES (3,?,?,?);" );
      cur->prepare();
      cur->bind( 1, x );                // set placeholders
      cur->bind( 2, y );
      cur->bind( 3, map[y][x] );
      cur->step();
    }
  }
}

int main(void){
    int playerpos[] = {33,4};
    setlocale(LC_ALL, "");
    initscr();
      start_color();
  init_pair(1, COLOR_BLACK, 0);
  init_pair(2, COLOR_RED, 0);
  init_pair(3, COLOR_GREEN, 0);
  init_pair(4, COLOR_YELLOW, 0);
  init_pair(5, COLOR_BLUE, 0);
  init_pair(6, COLOR_MAGENTA, 0);
    noecho();
    curs_set(0);
    void printMap(int map[35][105]);
    void movement(int map[][width], int playerpos[]);

    int map[][width] = {  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,5,5,5,5,5,5,5,5,5,5,5,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,1},
                          {1,5,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,8,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,8,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,5,0,0,5,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,5,5,5,0,0,0,0,5,1,1,5,5,5,5,5,5,8,8,5,5,5,5,5,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,5,1},
                          {1,5,5,0,0,5,0,0,5,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,5,1,5,0,0,0,0,5,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,5,0,0,5,0,0,0,0,5,1},
                          {1,5,5,0,0,5,0,0,5,0,0,5,0,5,5,8,8,5,5,5,5,0,0,0,0,0,8,0,0,0,0,0,5,1,5,0,0,0,0,5,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,5,1},
                          {1,5,5,0,0,0,0,0,5,0,0,5,0,5,5,0,0,5,1,1,5,0,0,0,0,0,5,5,5,5,5,5,5,1,5,0,0,0,0,5,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,5,1,1,5,5,5,5,5,5,5,1,1,1,1,1,1,1,5,0,0,0,0,5,1,1,1,1,1,5,5,5,8,8,5,5,5,1,1,5,5,5,8,8,5,5,5,1,1,1,5,0,0,0,0,0,0,5,5,5,5,5,5,5,5,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,5,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,1,5,0,0,5,1,1,1,1,1,5,5,5,5,0,0,0,5,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,5,5,5,5,5,5,5,8,8,5,5,5,5,0,0,5,5,5,5,5,5,5,5,5,5,1,1,5,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,1,5,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,1,1,1,1,1,1,1,5,0,0,5,1,1,5,0,0,5,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,5,5,5,5,5,5,8,8,5,5,5,5,5,5,5,1,1,5,0,0,0,0,0,8,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,1,1,1,1,1,1,1,5,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,8,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,1,1,1,1,1,1,1,5,0,0,5,1,1,5,0,0,0,0,5,5,5,5,5,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,5,1,1,5,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,5,5,5,5,5,5,5,8,8,5,1,1,5,5,5,5,5,5,1,1,1,5,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,5,0,0,5,1,1,5,5,5,5,8,8,5,5,5,5,5,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,1,1,1,1,1,5,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,8,0,0,0,0,5,1,1,1,1,1,5,0,0,5,5,5,5,1,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,8,1,1,5,5,5,5,5,5,5,8,8,5,5,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,8,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,8,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,5,0,0,5,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,1,1,1,1,5,0,0,0,0,0,5,1,1,1,1,1,1,5,5,8,8,5,5,5,5,1,1,1,5,0,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,5,8,8,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,5,5,5,5,5,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1},
                          {1,5,5,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,1,1,1,1,1,1,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,1},
                          {1,1,5,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,5,8,8,5,5,1,1,1,1,1,5,0,0,0,0,0,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,5,0,0,5,1,1,1,1,1,1,1,1,5,5,5,5,5,8,8,5,5,5,5,5,5,5,5,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,8,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,5,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,8,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,5,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,0,0,0,0,5,1,1,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,5,5,5,5,0,0,5,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,5,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,5,1,1,5,0,0,0,8,0,0,8,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,8,8,5,5,1,1,5,0,0,5,1,1,5,5,5,5,5,5,5,5,1},
                          {1,5,5,8,8,5,5,5,5,1,1,1,1,1,5,0,0,0,0,5,5,5,5,5,1,1,1,1,5,0,0,0,0,0,0,5,1,1,5,0,0,0,8,0,0,8,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,5,1,1,1,5,0,0,5,1,1,5,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,5,5,5,5,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,5,1,1,1,5,5,5,5,5,5,5,5,5,5,1,5,0,0,5,1,1,1,5,0,0,5,1,1,5,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,5,1,5,5,5,5,5,5,5,5,0,0,0,0,0,0,8,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,1,1,5,0,0,5,1,1,5,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,5,1,1,5,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,5,5,5,8,8,5,1,1,1,5,0,0,5,5,5,5,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,1,1,5,0,0,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,8,0,0,0,0,0,0,5,1},
                          {1,5,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,5,0,0,0,0,0,8,0,0,0,0,0,0,5,1},
                          {1,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,1,1,1,5,5,5,5,5,5,5,5,5,5,5,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

    while(true){
      printMap(map);
      movement(map, playerpos);
      clear();
    }
  }

void movement(int map[][width], int playerpos[]){
  char keypress;
  keypress = getch();
  try{
    switch(keypress){
      case 'w':
          if(map[playerpos[0]-5][playerpos[1]] == 3 or map[playerpos[0]-1][playerpos[1]] == 4 or map[playerpos[0]-1][playerpos[1]] == 6){
            playerpos[0] -= 1;
          }
          break;
        case 'a':
          if(map[playerpos[0]][playerpos[1]-1] == 3 or map[playerpos[0]][playerpos[1]-1] == 4 or map[playerpos[0]][playerpos[1]-1] == 6){
            playerpos[1] -= 1;
          }
          break;
        case 's':
          if(map[playerpos[0]+1][playerpos[1]] == 3 or map[playerpos[0]+1][playerpos[1]] == 4 or map[playerpos[0]+1][playerpos[1]] == 6){
            playerpos[0] += 1;
          }
          break;
        case 'd':
          if(map[playerpos[0]][playerpos[1]+1] == 3 or map[playerpos[0]][playerpos[1]+1] == 4 or map[playerpos[0]][playerpos[1]+1] == 6){
            playerpos[1] += 1;
          }
          break;
        case 'e':
          void doors( int map[][width], int playerpos[]);
          doors(map, playerpos);
          break;
        /*case 'l':
          uploadMap(map);
          break;*/
        default: //cout << "";
          break;
        }


    }catch(...){}
  }

void printMap(int map[35][105]){
  for(int y = 1; y < 35; ++y){
    for(int x = 1; x < 106; ++x){
      if(tiles[map[y][x]].colour > 0){attron(COLOR_PAIR(tiles[map[y][x]].colour));}
      printf("%s",tiles[map[y][x]].character.c_str());
      attroff(COLOR_PAIR(tiles[map[y][x]].colour));
      if(x == 105){printf("\n");}
    }
  }
}

/*void printMap(int map[][width], int playerpos[]){
  start_color();
  init_pair(1, COLOR_BLACK, 0);
  init_pair(2, COLOR_RED, 0);
  init_pair(3, COLOR_GREEN, 0);
  init_pair(4, COLOR_YELLOW, 0);
  init_pair(5, COLOR_BLUE, 0);
  init_pair(6, COLOR_MAGENTA, 0);
  initscr();
    for (int row = 0; row < height; ++row)
    {
        for (int column = 0; column < width; ++column)
        {
          string terrain;
          switch(map[row][column]){
            case 0:
            attron(COLOR_PAIR(3));
              terrain = "░";
              break;
            case 1:
              attron(COLOR_PAIR(3));
              terrain = "\u2588";
              break;
            case 2:
              terrain = "\u2588";
              break;
            case 3:
              terrain = " ";
              break;
            case 4:
              attron(COLOR_PAIR(3));
              terrain = "/";
              break;
            case 5:
              attron(COLOR_PAIR(3));
              terrain = "☰";
              break;
          }
          if(playerpos[0] == row && playerpos[1] == column){
            terrain = "\u2625";
          }
          printw(terrain.c_str());
          attroff(COLOR_PAIR(3));
        }
        printw("\n");
    }
}*/

void doors( int map[][width], int playerpos[]){
  string terrain;
        if(map[playerpos[0]][playerpos[1]+1] == 2){
          terrain = map[playerpos[0]][playerpos[1]+1] = 3;
          playerpos[1] += 1;
          doors(map, playerpos);
          playerpos[1] -= 1;
        }
        else if(map[playerpos[0]+1][playerpos[1]] == 2){
          terrain = map[playerpos[0]+1][playerpos[1]] = 3;
          playerpos[0] += 1;
          doors(map, playerpos);
          playerpos[0] -= 1;
        }
        else if(map[playerpos[0]][playerpos[1]-1] == 2){
          terrain = map[playerpos[0]][playerpos[1]-1] = 3;
          playerpos[1] -= 1;
          doors(map, playerpos);
          playerpos[1] += 1;
        }
        else if(map[playerpos[0]-1][playerpos[1]] == 2){
          terrain = map[playerpos[0]-1][playerpos[1]] = 3;
          playerpos[0] -= 1;
          doors(map, playerpos);
          playerpos[0] += 1;
      }
}
